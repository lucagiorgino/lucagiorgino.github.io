<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Luca Giorgino Blog</title>
        <link>https://lucagiorgino.github.io/blog</link>
        <description>Luca Giorgino Blog</description>
        <lastBuildDate>Mon, 07 Apr 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Malware analysis - an introduction]]></title>
            <link>https://lucagiorgino.github.io/blog/malware-analysis</link>
            <guid>https://lucagiorgino.github.io/blog/malware-analysis</guid>
            <pubDate>Mon, 07 Apr 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Malware analysis requires a structured approach to extract and understand hidden threats within various file formats and languages. By using the right tools, malware analysts can effectively deobfuscate, detect, and mitigate malicious payloads before they cause harm.]]></description>
            <content:encoded><![CDATA[<p>Malware analysis requires a <em>structured approach</em> to extract and understand <em>hidden threats</em> within various file formats and languages. By using the right tools, malware analysts can effectively deobfuscate, detect, and mitigate <em>malicious payloads</em> before they cause harm.</p>
<p>The following are some notes from the Udemy (italian) course: <a href="https://www.udemy.com/course/intro_malware_analisi/?referralCode=14E06E7C35D50C69D957" target="_blank" rel="noopener noreferrer">Introduzione alla malware analysis: Un approccio pratico</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="environment-for-malware-analysis">Environment for malware analysis<a href="https://lucagiorgino.github.io/blog/malware-analysis#environment-for-malware-analysis" class="hash-link" aria-label="Direct link to Environment for malware analysis" title="Direct link to Environment for malware analysis">​</a></h2>
<p><a href="https://en.wikipedia.org/wiki/Malware" target="_blank" rel="noopener noreferrer">Malware</a> refers to any software program or code specifically designed to exploit, damage, disrupt, or gain unauthorized access to computer systems, networks, or data. Malware operates covertly, often without user consent.</p>
<p>Here are some blog posts for further reading:</p>
<ul>
<li>The 12 Most Common Types of Malware: <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/malware/types-of-malware/" target="_blank" rel="noopener noreferrer">https://www.crowdstrike.com/en-us/cybersecurity-101/malware/types-of-malware/</a></li>
<li>Malware Analysis Explained: <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/malware/malware-analysis/" target="_blank" rel="noopener noreferrer">https://www.crowdstrike.com/en-us/cybersecurity-101/malware/malware-analysis/</a></li>
</ul>
<p>A secure and controlled environment is crucial for effective malware analysis, often utilizing virtual machines, sandboxing tools, and forensic utilities to prevent system compromise and facilitate safe examination.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="host-requirements">Host requirements<a href="https://lucagiorgino.github.io/blog/malware-analysis#host-requirements" class="hash-link" aria-label="Direct link to Host requirements" title="Direct link to Host requirements">​</a></h3>
<ul>
<li>Virtualization software like <a href="https://www.virtualbox.org/" target="_blank" rel="noopener noreferrer">Virtual Box</a> with an installed operating system suited to the target malware under analysis,</li>
<li>Windows 10 media creation tool: <a href="https://www.microsoft.com/it-it/software-download/windows10" target="_blank" rel="noopener noreferrer">https://www.microsoft.com/it-it/software-download/windows10</a>,</li>
<li>When using a <em>shared folder</em> between the host and guest, always set it to <strong>read-only</strong> to prevent malware from writing files to the host system,</li>
<li>Ensure to allocate an appropriate number of processor cores and memory, as some malware perform environment checks to detect virtualized environments and may terminate execution if the resources appear insufficient or unrealistic.</li>
</ul>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</div><div class="admonitionContent_BuS1"><p>In some situations, malware can exploit vulnerabilities in virtualization software, potentially escaping the virtual environment and compromising the host system.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="guest-requirements">Guest requirements<a href="https://lucagiorgino.github.io/blog/malware-analysis#guest-requirements" class="hash-link" aria-label="Direct link to Guest requirements" title="Direct link to Guest requirements">​</a></h3>
<p>Install the operating system required for the malware analysis environment.</p>
<p><strong>Common analysis tools</strong>:</p>
<ul>
<li>Editor tool of your choice, example <a href="https://notepad-plus-plus.org/downloads/" target="_blank" rel="noopener noreferrer">Notepad++</a>,</li>
<li><a href="https://www.python.org/" target="_blank" rel="noopener noreferrer">Python</a>, high-level programming language,</li>
<li><a href="https://www.7-zip.org/" target="_blank" rel="noopener noreferrer">7-zip</a>, open source software for compression/decompression of various file formats,</li>
<li><a href="https://ntcore.com/explorer-suite/" target="_blank" rel="noopener noreferrer">CFF explorer</a>, binary editor - tool used to analyse and modify files in binary format,</li>
<li><a href="https://systeminformer.com/" target="_blank" rel="noopener noreferrer">System Informer</a>, tool that helps you monitor system resources, debug software and detect malware,</li>
<li><a href="https://github.com/horsicq/Detect-It-Easy" target="_blank" rel="noopener noreferrer">Detect it easy</a>, program for determining types of files,</li>
<li><a href="https://github.com/VirusTotal/yara" target="_blank" rel="noopener noreferrer">Yara</a>, used to identity malware,</li>
<li><a href="https://learn.microsoft.com/en-en/sysinternals/" target="_blank" rel="noopener noreferrer">Sysinternals</a>, set of utilities for troubleshooting and diagnosing Windows and Linux systems and applications,</li>
<li><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener noreferrer">Fiddler proxy</a>, HTTP/HTTPS system proxy, used to inspect network requests. To inspect traffic over TLS ensure to enable the correct setting. <code>Tools-&gt;Options-&gt;HTTPS</code>: Check <code>Decrypt HTTPs traffic</code>, Install certificate, Check "Ignore server certificate errors",</li>
<li><a href="https://www.wireshark.org/" target="_blank" rel="noopener noreferrer">Wireshark</a>, tool for inspecting network traffic across various protocols beyond just HTTP/HTTPS.</li>
<li>(optional) <a href="https://github.com/ionuttbara/windows-defender-remover" target="_blank" rel="noopener noreferrer">Windows Defender Remover</a>, a tool which is uses to remove Windows Defender.</li>
</ul>
<p>It is recommended to create virtual machine <strong>snapshots</strong> to easily restore the system to a clean state after each analysis, examples:</p>
<ul>
<li><code>vanilla</code> - a clean, fresh OS installation</li>
<li><code>ready-to-play</code> - OS + analysis tools</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="windows---things-to-know">Windows - things to know<a href="https://lucagiorgino.github.io/blog/malware-analysis#windows---things-to-know" class="hash-link" aria-label="Direct link to Windows - things to know" title="Direct link to Windows - things to know">​</a></h4>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/sysinfo/registry" target="_blank" rel="noopener noreferrer">Windows Registry</a>: system-defined database in which applications and system components store and retrieve configuration data. It can be accessed using <code>WIN+R</code> and typing <code>regedit</code>:<!-- -->
<ul>
<li>administrator rights are required to modify the registry. Malware often targets <code>HKEY_CURRENT_USER</code>, <code>HKEY_USERS</code>, and <code>HKEY_LOCAL_MACHINE</code> keys,</li>
<li>malware leverages the registry for persistence, such as configuring automatic execution at start-up. For example, <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code> can be used to launch malware on boot (more information <a href="https://attack.mitre.org/techniques/T1547/001/" target="_blank" rel="noopener noreferrer">here</a>).</li>
<li>each user has a unique identifier within the Windows Registry,</li>
<li>the Registry is a valuable resource in forensic analysis to assess system state and detect anomalies,</li>
<li>before executing malware, exporting Registry values can be useful for comparison after execution to identify changes made by the malware,</li>
</ul>
</li>
<li>when executed, malware typically follows an installation routine to avoid easy deletion from directories like &nbsp;<code>Downloads</code>. It often installs itself in the <code>AppData</code> folder (<code>%APPDATA%</code> - a Windows environment variable) &nbsp;to maintain persistence,</li>
<li>Windows Shortcut (<code>.lnk</code>) are often used as an attack vector to run malicious code.</li>
</ul>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>When analysing malware, <em>disable updates and Windows Defender</em>, then <em>add the user folder to the exclusion list</em> to prevent automatic detection and removal of the malware during the analysis process. Disable Hide settings and show extensions.</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="threat-hunting-and-malware-triage">Threat Hunting and Malware Triage<a href="https://lucagiorgino.github.io/blog/malware-analysis#threat-hunting-and-malware-triage" class="hash-link" aria-label="Direct link to Threat Hunting and Malware Triage" title="Direct link to Threat Hunting and Malware Triage">​</a></h2>
<p><strong>Threat Hunting</strong> is a proactive cybersecurity process involving the systematic search for threats. More <a href="https://www.crowdstrike.com/en-us/cybersecurity-101/threat-intelligence/threat-hunting/" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>Below are some key resources commonly used by analysts:</p>
<ul>
<li><a href="https://bazaar.abuse.ch/" target="_blank" rel="noopener noreferrer">MalwareBazaar</a> is a platform for sharing and analysing malware samples. Malware files are typically <em>compressed and password-protected</em> to prevent accidental execution and reduce the risk of unintended infections,</li>
<li><a href="https://www.virustotal.com/" target="_blank" rel="noopener noreferrer">Virus Total</a>: is an <em>antivirus aggregator</em> that scans files and URLs using multiple security engines to detect threats. A <em>subscription is recommended</em> for advanced features like deeper analysis, historical data, and threat intelligence insights,</li>
<li><a href="https://www.hybrid-analysis.com/" target="_blank" rel="noopener noreferrer">Hybrid Analysis</a>: free malware analysis service for the community that detects and analyses unknown threats.</li>
</ul>
<p><strong>Phases of Malware Triage</strong></p>
<ol>
<li><strong>Identify file type</strong> - Determine the file format to understand how it operates and what tools are needed for analysis:<!-- -->
<ul>
<li>use <a href="https://github.com/horsicq/Detect-It-Easy" target="_blank" rel="noopener noreferrer">Detect it easy</a>: analyse the file and add extensions if applicable,</li>
<li>utilize <a href="https://ntcore.com/explorer-suite/" target="_blank" rel="noopener noreferrer">CFF explorer</a>: examine the file structure and metadata,</li>
</ul>
</li>
<li><strong>Perform preliminary analysis</strong> - Use analysis tools to gather initial insights into the file’s behaviour and characteristics:<!-- -->
<ul>
<li>identify the hash: Compute the file hash and search in malware databases to determine if it is a known or new threat,</li>
<li>perform string analysis: Use <code>strings.exe</code> to extract readable text from the file,</li>
<li>search for filenames: if possible, identify the original filename and research it online for additional context,</li>
<li>use sandbox analysis: execute the file in a controlled environment to observe behaviour and extract further information,</li>
</ul>
</li>
<li><strong>Identify the next steps (if necessary)</strong>:<!-- -->
<ul>
<li>for example, identify configuration or Command and Control (C&amp;C) Server.</li>
</ul>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="analysing-malicious-files">Analysing Malicious Files<a href="https://lucagiorgino.github.io/blog/malware-analysis#analysing-malicious-files" class="hash-link" aria-label="Direct link to Analysing Malicious Files" title="Direct link to Analysing Malicious Files">​</a></h2>
<p>Attackers frequently deliver malicious files through <strong>spam emails</strong> and other <strong>attack vectors</strong>. This section covers methods for analysing different file types commonly used in malware distribution.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="xls-files"><code>.xls</code> files<a href="https://lucagiorgino.github.io/blog/malware-analysis#xls-files" class="hash-link" aria-label="Direct link to xls-files" title="Direct link to xls-files">​</a></h3>
<p>Microsoft Excel files (<code>.xls</code>, <code>.xlsm</code>) can contain <strong>macros</strong>, which attackers use to execute malicious code.
Attackers can easily embed macros in malicious documents using the following methods:</p>
<ul>
<li><em>Right-click Menu</em> → <em>Assign Macro...</em></li>
<li><em>View</em> → <em>Macros</em> → <em>View Macros</em></li>
<li><em>Worksheet Tab</em>* → <em>Insert</em> (to add macros)</li>
<li><em>Worksheet Tab</em> → <em>View Code</em> (opens Microsoft Visual Basic for Applications - VBA)</li>
</ul>
<p>Attackers often protect macro access with passwords, making direct extraction difficult. Alternative methods are required to extract and analyse embedded macros.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="extracting-macros-with-oletools">Extracting Macros with <code>oletools</code><a href="https://lucagiorgino.github.io/blog/malware-analysis#extracting-macros-with-oletools" class="hash-link" aria-label="Direct link to extracting-macros-with-oletools" title="Direct link to extracting-macros-with-oletools">​</a></h4>
<p><a href="http://www.decalage.info/python/oletools" target="_blank" rel="noopener noreferrer">oletools</a>&nbsp;is a Python toolkit for analysing&nbsp;<a href="http://en.wikipedia.org/wiki/Compound_File_Binary_Format" target="_blank" rel="noopener noreferrer">Microsoft OLE2 files</a> (used in legacy Office formats like <code>.doc</code>, <code>.xls</code>, <code>.ppt</code>). Install it with:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install oletools</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Key <code>oletools</code> Commands:</p>
<ul>
<li><code>olemeta &lt;filename&gt;</code> - extracts (standard) metadata, useful for threat hunting and identifying similar malicious samples,</li>
<li><code>oleid &lt;filename&gt;</code> - detect specific characteristics usually found in malicious files, such as macros,</li>
<li><code>olevba &lt;filename&gt;</code> - extracts macro source code for analysis.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="analysing-extracted-macros">Analysing Extracted Macros<a href="https://lucagiorgino.github.io/blog/malware-analysis#analysing-extracted-macros" class="hash-link" aria-label="Direct link to Analysing Extracted Macros" title="Direct link to Analysing Extracted Macros">​</a></h4>
<p>Malware macros are often <strong>obfuscated</strong> to hide their true functionality. For example, during the analysis look for:</p>
<ul>
<li>obfuscated strings hiding URLs or commands,</li>
<li>download-and-execute functions, such as: <code>rundll32.exe URL,Function</code>.</li>
</ul>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Since 2023, Microsoft <strong>blocks automatic macro execution</strong> for files downloaded from the web, reducing but not eliminating the threat.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pdf-files"><code>.pdf</code> files<a href="https://lucagiorgino.github.io/blog/malware-analysis#pdf-files" class="hash-link" aria-label="Direct link to pdf-files" title="Direct link to pdf-files">​</a></h3>
<p><a href="https://medium.com/@jberkenbilt/the-structure-of-a-pdf-file-6f08114a58f6" target="_blank" rel="noopener noreferrer">PDFs are structured documents</a> that can contain hidden malicious code. While they can be analyzed with a text editor, reading them directly is often challenging due to compression and encoding mechanisms. <a href="https://github.com/digitalsleuth/peepdf-3" target="_blank" rel="noopener noreferrer"><code>peepdf-3</code></a> is a powerful Python tool designed to simplify PDF analysis, allowing analysts to extract JavaScript code, embedded objects, and suspicious URLs efficiently.</p>
<p>Install it with:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip install peepdf-3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="basic-commands">Basic Commands<a href="https://lucagiorgino.github.io/blog/malware-analysis#basic-commands" class="hash-link" aria-label="Direct link to Basic Commands" title="Direct link to Basic Commands">​</a></h4>
<p>Open a PDF in interactive mode: <code>peepdf -i &lt;filename&gt;</code>. Look for <strong>suspicious objects and streams</strong>, as they may contain embedded JavaScript/JS objects or external URLs (e.g., phishing links or download sites)</p>
<p>Use interactive mode:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">&gt; help # list the possible commands</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; object &lt;object_number&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Attackers may use <strong>URL obfuscation</strong> to make a malicious domain look legitimate:</p>
<ul>
<li><code>scheme://[user:password@]host[:port]/path[?query][#fragment]</code>,</li>
<li>example: <code>https://docs.google.comformasda....@maliousdomain.com/</code></li>
</ul>
<p>An analyst may believe that the link leads to Google Docs, but it actually redirects to a malicious site that initiates the <strong>malware execution chain</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="iso-img-lnk"><code>.iso</code>, <code>.img</code>, <code>.lnk</code><a href="https://lucagiorgino.github.io/blog/malware-analysis#iso-img-lnk" class="hash-link" aria-label="Direct link to iso-img-lnk" title="Direct link to iso-img-lnk">​</a></h3>
<ul>
<li><code>.iso</code> / <code>.img</code> files are used as containers for additional malicious files (<code>.dll</code>). Users may not notice <code>.dll</code> file presence if they have <code>Show hidden files, folders, and drives</code> option disabled.</li>
<li><code>.lnk</code> shortcut files to execute malware: check the file properties → <code>Target</code> to identify the command being executed. For example, <code>C:\Windows\system32\rundll32.exe malicious.dll, malicious_fun</code></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dll-dynamic-link-library-files"><code>.dll</code> (Dynamic Link Library) Files<a href="https://lucagiorgino.github.io/blog/malware-analysis#dll-dynamic-link-library-files" class="hash-link" aria-label="Direct link to dll-dynamic-link-library-files" title="Direct link to dll-dynamic-link-library-files">​</a></h3>
<p>Attackers can hijack a legitimate DLL (<a href="https://www.okta.com/identity-101/dll-hijacking/" target="_blank" rel="noopener noreferrer">DLL Hijacking</a>), injecting malicious functions while retaining original functionality. DLL files expose functions through the <strong>export table</strong>, making it possible to identify added malicious functions. You can use <a href="https://ntcore.com/explorer-suite/" target="_blank" rel="noopener noreferrer">CFF explorer</a> to start analysing a DLL file.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="msi-microsoft-installer-files"><code>.msi</code> (Microsoft Installer) Files<a href="https://lucagiorgino.github.io/blog/malware-analysis#msi-microsoft-installer-files" class="hash-link" aria-label="Direct link to msi-microsoft-installer-files" title="Direct link to msi-microsoft-installer-files">​</a></h3>
<p><code>.msi</code> files can be misused to install malware. Attackers often embed <code>.dll</code> payloads inside <code>.msi</code> packages.</p>
<p>Install <a href="https://learn.microsoft.com/en-us/windows/win32/msi/orca-exe" target="_blank" rel="noopener noreferrer"><code>Orca.exe</code></a> via <strong>Windows SDK Installer</strong> (select "MSI Tools" during installation). Localize <code>Orca-x86_en-us.msi</code> and install it. To analyse an <code>.msi</code> file with<code> Orca.exe</code>, simply drag and drop the file into the application.</p>
<p>Inspect tables such as:</p>
<ul>
<li><strong>File Table</strong> → Lists all embedded files (e.g., <code>.dll</code>, <code>.exe</code>),</li>
<li><strong>CustomAction Table</strong> → may reveals execution commands (e.g., launching <code>rundll32.exe malicious.dll, malicious_fun</code>).</li>
</ul>
<p>You can also extract files from <code>.msi</code> using 7-Zip. You can also find <code>.cab</code> files inside <code>.msi</code> packages and can be used as hidden containers for malicious payloads.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="script-based-malware">Script-based Malware<a href="https://lucagiorgino.github.io/blog/malware-analysis#script-based-malware" class="hash-link" aria-label="Direct link to Script-based Malware" title="Direct link to Script-based Malware">​</a></h2>
<p><strong>Multi-Stage Unpacking</strong> - Malware often executes in <strong>stages</strong>, requiring step-by-step unpacking to reveal the final payload.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="powershell">PowerShell<a href="https://lucagiorgino.github.io/blog/malware-analysis#powershell" class="hash-link" aria-label="Direct link to PowerShell" title="Direct link to PowerShell">​</a></h3>
<p>PowerShell (<code>.ps1</code> scripts) is a powerful scripting language commonly used in the early stages of malware attacks for automation, system reconnaissance, and payload execution.</p>
<p>By default, PowerShell restricts script execution from third-party sources. To enable it, use: <code>Set-ExecutionPolicy RemoteSigned</code>.</p>
<p>Possible tools for analysis:</p>
<ul>
<li><strong>Visual Studio Code + PowerShell Extension</strong>: ideal for debugging and script analysis,</li>
<li><strong>PowerShell ISE</strong>: a built-in tool for script execution and debugging.</li>
</ul>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>(<em>Optional</em>) Depending on the malware under analysis: <strong>disabling network access in the virtual machine</strong> can help prevent accidental internet requests, unauthorized data exfiltration, or command-and-control communication.</p></div></div>
<p>Malicious PowerShell scripts often use <a href="https://learn.microsoft.com/en-us/windows/win32/apiindex/windows-api-list" target="_blank" rel="noopener noreferrer">Windows API</a> - functions like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">DllImport("kernel32.dll")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VirtualAlloc(...)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Scripts may execute other threads or process. You can use <a href="https://systeminformer.com/" target="_blank" rel="noopener noreferrer">System Informer</a> to inspect active processes, read and dump process memory for further analysis.
For example, you can load memory dumps into a binary analysis tool like <a href="https://ntcore.com/explorer-suite/" target="_blank" rel="noopener noreferrer">CFF explorer</a>, which includes a "Quick Disassembler" for low-level inspection.</p>
<p>PowerShell-based malware is often heavily obfuscated, using techniques such variable and function renaming, reversing or encoding strings. To improve readability, deobfuscation is recommended. Since doing this manually can be tedious and time-consuming, consider using deobfuscation tools or writing a simple script to automate the process.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="javascript-jscript-and-vbscript">JavaScript, JScript and VBScript<a href="https://lucagiorgino.github.io/blog/malware-analysis#javascript-jscript-and-vbscript" class="hash-link" aria-label="Direct link to JavaScript, JScript and VBScript" title="Direct link to JavaScript, JScript and VBScript">​</a></h3>
<p>JavaScript usually runs within a sandboxed browser environment and does not have direct system privileges, unless browser vulnerabilities are exploited. On Windows, <a href="https://staff.cdms.westernsydney.edu.au/~jianhua/SAP_300165/tutorials/Practical_3_files/WSHCh01.pdf" target="_blank" rel="noopener noreferrer">Windows Script Host</a> provides an environment in which users can execute scripts in various languages that use various object models to perform tasks.</p>
<p>A JavaScript malware can be debugged using: <strong>Visual Studio + Windows Script Host</strong>.
In Visual Studio settings you can set the debugger: <code>cscript.exe //X $(ItemPath)</code></p>
<p>Useful websites:</p>
<ul>
<li><a href="https://obfuscator.io/" target="_blank" rel="noopener noreferrer">JavaScript Obfuscator</a>,</li>
<li><a href="https://deobfuscate.io/" target="_blank" rel="noopener noreferrer">JavaScript Deobfuscator</a>.</li>
</ul>
<p>VBScript is a deprecated programming language for scripting on Microsoft Windows using Component Object Model, based on classic Visual Basic and Active Scripting. (<a href="https://en.wikipedia.org/wiki/VBScript" target="_blank" rel="noopener noreferrer">Wiki</a>, <a href="https://learn.microsoft.com/en-us/previous-versions/windows/desktop/automat/activex-objects" target="_blank" rel="noopener noreferrer"><code>ActiveXObject</code></a>).</p>
<p><code>.hta</code> files executed via the <code>mshta.exe</code> utility, can often used as script containers for malware. Learn more: <a href="https://redcanary.com/threat-detection-report/techniques/mshta/" target="_blank" rel="noopener noreferrer">Red Canary - mshta Attack Technique</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="portable-executable-pe-format">Portable Executable (PE) Format<a href="https://lucagiorgino.github.io/blog/malware-analysis#portable-executable-pe-format" class="hash-link" aria-label="Direct link to Portable Executable (PE) Format" title="Direct link to Portable Executable (PE) Format">​</a></h2>
<p>Portable Executable (PE) format&nbsp;is a file format for executables used in Windows operating systems, it’s based on the&nbsp;COFF&nbsp;file format (Common Object File Format). A PE file is a data structure that holds information necessary for the OS loader to be able to load that executable into memory and execute it. PE file extensions include <code>.exe</code>, <code>.dll</code>, <code>.scr</code>, and <code>.sys</code>. More details <a href="https://learn.microsoft.com/en-us/windows/win32/debug/pe-format" target="_blank" rel="noopener noreferrer">here</a> in the Microsoft documentation.</p>
<p>When analysing PE binaries, consider the differences between <em>managed and unmanaged languages</em>, <em>little endian vs big endian</em> when interpreting hex data, and <em>memory mapping</em>, as file offsets and in-memory addresses often differ. <a href="https://systeminformer.com/" target="_blank" rel="noopener noreferrer">System Informer</a> can be used to analyse memory.</p>
<p>Some articles for further reading:</p>
<ul>
<li><a href="https://developingthefuture.net/compilation-process-and-jit-compiler/" target="_blank" rel="noopener noreferrer">The Process of Compilation in C++, Java and .Net</a>,</li>
<li><a href="https://stackoverflow.com/questions/3563870/difference-between-managed-and-unmanaged" target="_blank" rel="noopener noreferrer">Difference between "managed" and "unmanaged"</a>,</li>
<li><a href="https://www.digital-detective.net/understanding-big-and-little-endian-byte-order/" target="_blank" rel="noopener noreferrer">Understanding Big and Little Endian Byte Order</a>,</li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/memory/memory-management" target="_blank" rel="noopener noreferrer">Memory Management</a> (Microsoft doc),</li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Address_space" target="_blank" rel="noopener noreferrer">Address space</a>, <a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener noreferrer">Virtual memory</a>, <a href="https://en.wikipedia.org/wiki/Virtual_address_space" target="_blank" rel="noopener noreferrer">Virtual address space</a>.</li>
</ul>
<p>Below are the main sections commonly found in the PE format:</p>
<ul>
<li><code>DOS Header</code>
<ul>
<li><code>e_magic</code>: signature <strong>MZ</strong> (indicates a valid DOS executable),</li>
<li><code>e_lfanew</code>: offset where the <strong>NT Header</strong> starts,</li>
</ul>
</li>
<li><code>NT Header</code>
<ul>
<li><code>File Header</code>, contains general information about the PE file, including the target architecture,</li>
<li><code>Optional Header</code> (despite the name, it’s required for executables):<!-- -->
<ul>
<li><code>Magic</code>: Identifies whether the file is 32-bit (<code>0x10B</code>) or 64-bit (<code>0x20B</code>),</li>
<li><code>AddressOfEntryPoint</code>: Entry point for execution (where execution starts),</li>
<li><code>ImageBase</code>: Preferred memory address where the file should be loaded,</li>
<li><code>DllCharacteristics</code>: If ASLR is enabled, the DLL can be relocated in memory, impacting malware analysis,</li>
<li><strong>Data Directories</strong>: pointers to key structures such as the <strong>Import Table, Export Table, and Resource Table</strong>,</li>
</ul>
</li>
</ul>
</li>
<li>Section Headers<!-- -->
<ul>
<li><code>.text</code>: contains executable code,</li>
<li><code>.rdata</code>,<code>.data</code>: store read-only and writable data, such as strings and variables,</li>
</ul>
</li>
<li><code>Import Directory</code>: lists DLLs and functions the executable depends on. Example:<!-- -->
<ul>
<li><code>kernel32.dll</code>: common Windows API functions,</li>
<li><code>IsDebuggerPresent</code>: often used by malware to detect if it’s running in a debugging environment.</li>
</ul>
</li>
</ul>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>In <a href="https://ntcore.com/explorer-suite/" target="_blank" rel="noopener noreferrer">CFF explorer</a> , go to the Optional Header section, then click on 	the&nbsp;<code>DllCharacteristics</code>&nbsp;row, <code>DLL can move</code>→ enable/disable ASLR option.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="net">.NET<a href="https://lucagiorgino.github.io/blog/malware-analysis#net" class="hash-link" aria-label="Direct link to .NET" title="Direct link to .NET">​</a></h3>
<p>Machine code disassembly cannot process a managed language compiled executable because it is not native machine code. Instead, it must be disassembled from the intermediate language using an appropriate disassembler. Managed files are easier to decompile because they contain additional metadata, such as symbol names, class structures, and method definitions.</p>
<ul>
<li><a href="https://github.com/dnSpyEx/dnSpy" target="_blank" rel="noopener noreferrer">dnSpyEx</a> is a debugger and .NET assembly editor. Go to entry point and start analyse it,</li>
<li><a href="https://github.com/de4dot/de4dot" target="_blank" rel="noopener noreferrer">de4dot</a> is a .NET deobfuscator and unpacker written in C#. Here the compiled binaries: <a href="https://github.com/vee2xx/de4dot-built-binaries" target="_blank" rel="noopener noreferrer">de4dot-built-binaries</a>,</li>
<li><code>ildasm.exe</code> - is an intermediate language disassembler, <a href="https://learn.microsoft.com/en-us/dotnet/framework/tools/ildasm-exe-il-disassembler" target="_blank" rel="noopener noreferrer">docs</a>. Usage examples:<!-- -->
<ul>
<li><code>ildasm file.exe /out:file.il</code></li>
<li><code>ilasm file.il /out:file_m.exe</code></li>
</ul>
</li>
</ul>
<p>While inspecting .NET code, look for some of the following instructions:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># Can be used to load second-stage payloads in memory </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Assembly.Load( ... )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># function from kernel32.dll</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># allocate memory with execution rights</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VirtualAlloc(...) </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://systeminformer.com/" target="_blank" rel="noopener noreferrer">System Informer</a> has a .NET Assemblies tab, which can be used to inspect loaded .NET assemblies within a process. This feature allows to detect suspicious or injected .NET assemblies, which may indicate malware activity.</p>
<p><a href="https://github.com/enkomio/shed" target="_blank" rel="noopener noreferrer">shed (.NET Runtime Inspector)</a>, dnSpyEx, or <a href="https://systeminformer.com/" target="_blank" rel="noopener noreferrer">System Informer</a> can be used to analyse .NET processes and extract loaded binaries.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unmanaged-code">Unmanaged code<a href="https://lucagiorgino.github.io/blog/malware-analysis#unmanaged-code" class="hash-link" aria-label="Direct link to Unmanaged code" title="Direct link to Unmanaged code">​</a></h3>
<p><em>Requirements</em>: knowledge of <a href="https://en.wikipedia.org/wiki/Assembly_language" target="_blank" rel="noopener noreferrer">Assembly language</a>, how stack and heap works, <a href="https://learn.microsoft.com/en-us/cpp/build/x64-calling-convention" target="_blank" rel="noopener noreferrer">Windows calling convention</a></p>
<ul>
<li><a href="https://x64dbg.com/" target="_blank" rel="noopener noreferrer">x64dbg</a> open-source x64/x32 debugger for windows,<!-- -->
<ul>
<li>To emulate what a malware does we can load <code>rundll32.exe</code> and pass the DLL under analysis to the command  (Option → Settings → User DLL Load),</li>
</ul>
</li>
<li><a href="https://github.com/hasherezade/pe-sieve" target="_blank" rel="noopener noreferrer">PE-sieve</a>is a tool that helps to detect malware running on the system, as well as to collect the potentially malicious material for further analysis. Recognizes and dumps variety of implants within the scanned process: replaced/injected PEs, shellcodes, hooks, and other in-memory patches,</li>
<li><a href="https://ghidra-sre.org/" target="_blank" rel="noopener noreferrer">Ghidra</a> is a software reverse engineering (SRE) framework,</li>
<li>Other alternatives: <a href="https://hex-rays.com/ida-pro" target="_blank" rel="noopener noreferrer">IDA Pro</a>, <a href="https://binary.ninja/" target="_blank" rel="noopener noreferrer">Binary Ninja</a>, <a href="https://rada.re/" target="_blank" rel="noopener noreferrer">radare2</a>, <a href="https://github.com/icedland/iced" target="_blank" rel="noopener noreferrer">iced-rs</a>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="yara-rules">YARA rules<a href="https://lucagiorgino.github.io/blog/malware-analysis#yara-rules" class="hash-link" aria-label="Direct link to YARA rules" title="Direct link to YARA rules">​</a></h2>
<p><a href="https://virustotal.github.io/yara/" target="_blank" rel="noopener noreferrer">YARA</a> is a powerful tool designed primarily for malware researchers to <strong>identify and classify malware samples</strong>. It allows users to create <em>rules</em> that describe malware families (or any other artifacts) using <em>textual or binary patterns</em>. Each rule consists of a <em>set of strings</em> and a <em>boolean expression</em> that defines its detection logic.</p>
<p>Suggestions for crafting an effective YARA rule:</p>
<ul>
<li>identify meaningful strings or format strings within the malware,</li>
<li>look for imported libraries and function names that indicate malicious behaviour,</li>
<li>consider obfuscation techniques, malware may encode or manipulate critical strings to evade detection.</li>
</ul>
<p>Beware of false positives and false negatives when creating YARA rules. While false positives can lead to unnecessary alerts, false negatives are more dangerous, as they allow malware to go undetected. Test YARA rules extensively. Examples of YARA rules can be found on the <a href="https://yara.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer">documentation</a>.</p>
<p>Running YARA from the command-line</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">yara64 &lt;rule file&gt; &lt;binary to analyse&gt; | &lt;PID&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><a href="https://www.unpac.me/" target="_blank" rel="noopener noreferrer">UNPACME</a> is an automated malware unpacking service and it can be used for YARA development, testing, and hunting.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="malware-analysis-report">Malware Analysis Report<a href="https://lucagiorgino.github.io/blog/malware-analysis#malware-analysis-report" class="hash-link" aria-label="Direct link to Malware Analysis Report" title="Direct link to Malware Analysis Report">​</a></h2>
<p>Malware analysis reports provide critical insights into a threat, serving as the key output of the analysis process. A report should help assess impact and understand the threat.</p>
<p>A well-structured report combines strategic and technical details, covering the malware’s nature, operators, targets, and in-depth analysis of its functions, payloads, and behaviours.</p>
<p>Examples of malware reports:</p>
<ul>
<li><a href="https://www.ncsc.gov.uk/section/keep-up-to-date/malware-analysis-reports" target="_blank" rel="noopener noreferrer">Reports and IoCs from the NCSC malware analysis team</a>,</li>
<li><a href="https://any.run/malware-reports/" target="_blank" rel="noopener noreferrer">ANY.RUN</a> malicious database - provides free access to many public reports,</li>
<li><a href="https://thedfirreport.com/" target="_blank" rel="noopener noreferrer">The DFIR Report</a>,</li>
<li>WikiLoader: <a href="https://www.proofpoint.com/us/blog/threat-insight/out-sandbox-wikiloader-digs-sophisticated-evasion" target="_blank" rel="noopener noreferrer">https://www.proofpoint.com/us/blog/threat-insight/out-sandbox-wikiloader-digs-sophisticated-evasion</a>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vocabulary-tips-and-resources">Vocabulary, Tips and Resources<a href="https://lucagiorgino.github.io/blog/malware-analysis#vocabulary-tips-and-resources" class="hash-link" aria-label="Direct link to Vocabulary, Tips and Resources" title="Direct link to Vocabulary, Tips and Resources">​</a></h2>
<ul>
<li>A&nbsp;<strong>malware sandbox</strong>&nbsp;is a virtual environment used to isolate and analyse the behaviour of potentially malicious software. It execute a file and trace all the operations that are performed,</li>
<li><a href="https://www.cloudflare.com/learning/security/what-are-indicators-of-compromise/" target="_blank" rel="noopener noreferrer"><strong>Indicators of Compromise</strong> (IOCs)</a> are evidence left behind by an attacker or malware that can be used to identify a security incident. Common examples include file hashes, IP addresses, domain names, or registry changes. They are often included in analysis reports to support detection and response efforts;</li>
<li><a href="https://sysdig.com/learn-cloud-native/what-is-a-command-and-control-server/" target="_blank" rel="noopener noreferrer"><strong>Command and Control (C&amp;C) Server</strong></a> is a server controlled by an attacker to is used to deliver malware, issue commands, exfiltrate data, or coordinate further attacks on targeted systems,</li>
<li><strong>Packer</strong>: utility used to compress and obfuscate files, making them more difficult to analyse. Malware often leverages packers to evade detection by antivirus software,</li>
<li><strong>AsyncRAT</strong> is a Remote Access Tool (RAT) designed to remotely monitor and control other computers through a secure encrypted connection,</li>
<li><strong>Quackbot</strong> is a famous banking trojan, more <a href="https://www.darktrace.com/cyber-ai-glossary/qakbot" target="_blank" rel="noopener noreferrer">here</a>,</li>
<li><strong>Autostart Extension Points (ASEP)</strong> are commonly used by malware as <a href="https://www.infosecinstitute.com/resources/malware-analysis/common-malware-persistence-mechanisms/" target="_blank" rel="noopener noreferrer">persistence mechanisms</a> and define a starting point for the malware,</li>
<li><a href="https://learn.microsoft.com/en-en/sysinternals/" target="_blank" rel="noopener noreferrer">Sysinternals</a>:<!-- -->
<ul>
<li><code>Autoruns64.exe</code>, useful to list and reports auto-start services and many other things,</li>
<li><code>string.exe</code> usage example: <code>string.exe -n 20 file.exe</code>, list all string of 20 character in the executable,</li>
</ul>
</li>
<li><a href="https://github.com/ret42/RE-Thing" target="_blank" rel="noopener noreferrer">ret42/RE-Thing</a> - list of reverse eng. tools,</li>
<li>ired.team notes: <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals" target="_blank" rel="noopener noreferrer">miscellaneous-reversing-forensics</a>,</li>
<li><a href="https://cyberlab.pacific.edu/resources/reverse-engineering-cheat-sheets/analyzing-malicious-document-files.pdf" target="_blank" rel="noopener noreferrer">reverse-engineering-cheat-sheets</a>.</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="software-obfuscation-techniques">Software Obfuscation Techniques<a href="https://lucagiorgino.github.io/blog/malware-analysis#software-obfuscation-techniques" class="hash-link" aria-label="Direct link to Software Obfuscation Techniques" title="Direct link to Software Obfuscation Techniques">​</a></h4>
<p>Attackers use <strong>obfuscation techniques</strong> to evade detection and analysis. Common transformations include:</p>
<ul>
<li><strong>String Encoding</strong> – Hiding commands, URLs, and payloads.</li>
<li><strong>Control Flow Flattening</strong> – Making code execution paths difficult to follow.</li>
<li><strong>Packing and Encryption</strong> – Wrapping malicious code inside additional layers to avoid detection.</li>
</ul>
<p>For a detailed breakdown of obfuscation methods, refer to:<br>
<a href="https://tigress.wtf/transformations.html" target="_blank" rel="noopener noreferrer">Tigress - Software Obfuscation Transformations</a></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="attck-matrix">ATT&amp;CK Matrix<a href="https://lucagiorgino.github.io/blog/malware-analysis#attck-matrix" class="hash-link" aria-label="Direct link to ATT&amp;CK Matrix" title="Direct link to ATT&amp;CK Matrix">​</a></h4>
<p><a href="https://attack.mitre.org/" target="_blank" rel="noopener noreferrer">MITRE ATT&amp;CK</a> is a globally-accessible knowledge base of adversary tactics and techniques based on real-world observations.</p>]]></content:encoded>
            <category>security</category>
            <category>malware-analysis</category>
        </item>
        <item>
            <title><![CDATA[Keystone Enclave]]></title>
            <link>https://lucagiorgino.github.io/blog/keystone-enclave</link>
            <guid>https://lucagiorgino.github.io/blog/keystone-enclave</guid>
            <pubDate>Thu, 15 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[This post outlines the functionalities of the Keystone Enclave framework, extracted from my master's thesis (updated to December 2022). Keystone is an open-source framework designed for building Trusted Execution Environments, adaptable for various platforms that are based on RISC-V hardware.]]></description>
            <content:encoded><![CDATA[<p>This post outlines the functionalities of the <a href="https://keystone-enclave.org/" target="_blank" rel="noopener noreferrer">Keystone Enclave</a> framework, extracted from my master's thesis <em>(updated to December 2022)</em>. Keystone is an open-source framework designed for building Trusted Execution Environments, adaptable for various platforms that are based on RISC-V hardware.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="trusted-execution-environment">Trusted Execution Environment<a href="https://lucagiorgino.github.io/blog/keystone-enclave#trusted-execution-environment" class="hash-link" aria-label="Direct link to Trusted Execution Environment" title="Direct link to Trusted Execution Environment">​</a></h2>
<p>A <strong>Trusted Execution Environment (TEE)</strong> is an execution environment that runs alongside but is isolated from the device's main operating system.
It ensures that the <em>confidentiality</em> and <em>integrity</em> of the code and data loaded in the TEE are preserved.
Trusted applications running on TEE have access to the full capabilities of a device's main processor and memory, while hardware isolation shields these components from user-installed apps running in the main operating system. The various included trusted applications are protected from one another by software and cryptographic isolations within the TEE.<br>
<!-- -->The two most common TEE implementations at the moment are ARM TrustZone and Intel SGX. All these TEEs make design decisions based on either the target applications or threat models and these choices are fixed since they are strictly hardware related. They were not designed to have flexibility or extensibility for enclave developers. If the hardware changes or has a new feature, the enclave developer has to redesign the TEE.
All TEE platforms aim to reduce the enclave's trusted computing base, and they have managed to achieve different degrees of success. The <a href="https://apps.dtic.mil/sti/pdfs/ADA108831.pdf" target="_blank" rel="noopener noreferrer">Trusted Computing Base (TCB)</a> is a section of the system, which could include hardware, firmware and software. It is responsible for enforcing the security policy of the system. Additionally, closed-source hardware and microcode implementations make it impossible for a third party to evaluate the security of TEEs.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="customizable-trusted-execution-environment">Customizable Trusted Execution Environment<a href="https://lucagiorgino.github.io/blog/keystone-enclave#customizable-trusted-execution-environment" class="hash-link" aria-label="Direct link to Customizable Trusted Execution Environment" title="Direct link to Customizable Trusted Execution Environment">​</a></h3>
<p><a href="https://keystone-enclave.org/2019/07/22/Keystone-Paper.html" target="_blank" rel="noopener noreferrer">Customizable TEE</a> is the solution to closed-source hardware-implemented TEEs problems. It has been designed to be flexible, and configurable and to have a small TCB. It has been designed with clear abstractions and a modular programming model which simplifies for others to extend and add features to the TEE. An example of a customizable TEE is Keystone. Three logical actors, such as the manufacturer (who makes the hardware), the platform provider (runs the hardware, such as a cloud provider), and the enclave developer (who writes software that runs in the enclaves), were identified by Keystone developers as being a part of the customizable TEE ecosystem. In a customizable TEE, as opposed to a standard TEE, decisions made by all 3 actors together determine the security guarantees offered and the functionalities enabled.<br>
<!-- -->Keystone offers security primitives that can be joined together via the software framework rather than creating a single instance of TEE hardware. The TEE can be modified by the creator of the enclave and the platform provider to suit their threat models or platform configurations. The Keystone project offers a general and formally proven interface for a variety of devices to create an open standard for TEEs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="risc-v-background">RISC-V Background<a href="https://lucagiorgino.github.io/blog/keystone-enclave#risc-v-background" class="hash-link" aria-label="Direct link to RISC-V Background" title="Direct link to RISC-V Background">​</a></h2>
<p><a href="https://riscv.org/technical/specifications/" target="_blank" rel="noopener noreferrer">RISC-V</a> is open-source, which provides Keystone with several benefits. The most noticeable is that anyone can see how it works, understand the threat model it can operate under, and verify how exploits/patches function.<br>
<!-- -->Other advantages of RISC-V are security-oriented primitives, which provide efficient isolation, the most notable being <a href="https://sifive.github.io/freedom-metal-docs/devguide/pmps.html" target="_blank" rel="noopener noreferrer">Physical Memory Protection (PMP)</a>. RISC-V is an evolving and community-driven Instruction Set Architecture (ISA). Keystone has been designed and developed using RISC-V standard security features. Moreover, the ever-growing world of RISC-V gives Keystone a wide variety of potential platforms and different deployment scenarios to which it can adapt to.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="risc-v-privilieged-isa">RISC-V Privilieged ISA<a href="https://lucagiorgino.github.io/blog/keystone-enclave#risc-v-privilieged-isa" class="hash-link" aria-label="Direct link to RISC-V Privilieged ISA" title="Direct link to RISC-V Privilieged ISA">​</a></h3>
<p><a href="https://riscv.org/technical/specifications/" target="_blank" rel="noopener noreferrer">RISC-V</a> has three software privilege levels (in increasing order of capability): user mode (U-mode), supervisor mode (S-mode), and machine mode (M-mode). Only one of the privilege modes can be active on the processor at once.<br>
<!-- -->The active privilege level determines what the software can do while it is running. These are typical applications for each level of privilege:</p>
<ul>
<li><em>U-mode</em>: user processes</li>
<li><em>S-mode</em>: kernel (including kernel modules and device drivers) or hypervisor</li>
<li><em>M-mode</em>: bootloader and firmware.</li>
</ul>
<p>When the processor is in the highest privilege mode, M-mode, it is in control of all physical resources and interrupts. As with microcode in Complex Instruction Set Computer (CISC) ISAs (such as x86), M-mode is not interruptible and not affected by the interference of lower modes. M-mode is used in Keystone for executing the TCB of the system, the <em>security monitor</em> (SM).</p>
<p><img decoding="async" loading="lazy" alt="keystone-vs-x86" src="https://lucagiorgino.github.io/assets/images/TEE-keystone-vs-x86-f29d0c9688224df0408d314dd155a152.svg" width="701" height="621" class="img_ev3q"> <em>Architecture differences between x86 and Keystone</em></p>
<p>The following are some advantages of utilizing an M-mode software as the TCB:</p>
<ul>
<li>programmability: unlike microcode for x86, in RISC-V M-mode software can be written using pre-existing toolchains and programming languages, such as C</li>
<li>agile patching: since the TCB is purely software, bugs or vulnerabilities can be patched without updates, which are specific to a particular hardware</li>
<li>verifiability: compared to hardware, the software is generally simpler to be formally verified.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="physical-memory-protection">Physical Memory Protection<a href="https://lucagiorgino.github.io/blog/keystone-enclave#physical-memory-protection" class="hash-link" aria-label="Direct link to Physical Memory Protection" title="Direct link to Physical Memory Protection">​</a></h3>
<p><a href="https://sifive.github.io/freedom-metal-docs/devguide/pmps.html" target="_blank" rel="noopener noreferrer">Physical Memory Protection (PMP)</a> is a strong standard primitive that enables M-mode to control the access to physical memory from lower privileges modes. Keystone requires PMP to implement memory isolation of enclaves.
Only software in M-mode can configure the PMP, which is controlled by a series of control and status registers (CSR) that limit physical memory access to the U-mode and S-mode. Depending on the platform design, PMP entries number can change.</p>
<p><img decoding="async" loading="lazy" alt="pmp-img" src="https://lucagiorgino.github.io/assets/images/pmp-reg-79032473a5757e2b1fb12a20b4ea0e02.svg" width="521" height="401" class="img_ev3q"> <em>Image representing PMP registers</em></p>
<p>Since PMP exclusively works on physical addresses, S-mode can continue to support virtual addresses without affecting the security of the system. Even though each processor may implement PMP differently in hardware, the basic guarantees are part of the standard. PMP is used by Keystone Security Monitor to create memory isolation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keystone-components">Keystone components<a href="https://lucagiorgino.github.io/blog/keystone-enclave#keystone-components" class="hash-link" aria-label="Direct link to Keystone components" title="Direct link to Keystone components">​</a></h2>
<p>A Keystone-capable system is made up of different modules operating in various privilege modes as shown in the figure below:</p>
<p><img decoding="async" loading="lazy" alt="keystoneComponents" src="https://lucagiorgino.github.io/assets/images/keystone-components-40b1798d042edeb4821dbd8bc681d037.png" width="1599" height="746" class="img_ev3q"> <em>Keystone system with host processes, untrusted OS, security monitor, and multiple enclaves (each with runtime and eapp)</em></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="trusted-hardware">Trusted Hardware<a href="https://lucagiorgino.github.io/blog/keystone-enclave#trusted-hardware" class="hash-link" aria-label="Direct link to Trusted Hardware" title="Direct link to Trusted Hardware">​</a></h4>
<p>Trusted Hardware is a CPU package built by an honest manufacturer that must enclose standard RISC-V cores, which are Keystone compatible, and a root of trust. Optional features of the hardware could also include memory encryption, cache partitioning, a cryptographically safe source of randomness, etc. Platform-specific plug-ins are needed by the Security Monitor to support optional features.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="security-monitor">Security Monitor<a href="https://lucagiorgino.github.io/blog/keystone-enclave#security-monitor" class="hash-link" aria-label="Direct link to Security Monitor" title="Direct link to Security Monitor">​</a></h3>
<p><strong>Security Monitor (SM)</strong> is a trusted software that runs in M-mode and works as the small TCB in the Keystone system. Before the SM can be considered trusted, it must be verified by the hardware root of trust. Then, the root of trust <em>measures</em> the SM, generates a keypair for remote attestation, signs the public key, and eventually can continue booting. The measurement of the SM consists in computing the hash of the SM firmware image. The SM manages isolation boundaries between the enclaves and the untrusted OS, therefore it implements the majority of Keystone's security guarantees.  It serves as an interface for managing the enclave's lifecycle and utilising platform-specific features. The OS and enclaves may call SM functions using the Supervisor Binary Interface (SBI). Specifically, the SM provides the following functionality:</p>
<ul>
<li><em>memory isolation</em> using RISC-V PMP</li>
<li><em>remote attestation</em> (signatures and measurement): the goal is to demonstrate to a remote client that the enclave contains the expected application, and is running on trusted hardware</li>
<li>and other features, such as system PMP synchronization, enclave thread management and side-channel defences</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="runtime">Runtime<a href="https://lucagiorgino.github.io/blog/keystone-enclave#runtime" class="hash-link" aria-label="Direct link to Runtime" title="Direct link to Runtime">​</a></h3>
<p>Keystone developers implemented the <strong>Runtime (RT)</strong> with the goal of minimal and flexible TCB. It is an S-mode software. As a result, enclave applications can use modular system-level abstraction (e.g., virtual memory management). It provides kernel-like functionality, such as system calls, trap handling, virtual memory management and so on. Although the RT functions similarly to a kernel inside an enclave, most kernel functionalities are not necessary for the enclave application. To allow enclave developers to include only the necessary functionality and minimize the TCB, Keystone developers created an example of RT called Eyrie. It enables reusability since it is compatible with multiple-user programs. And by adding RT modules, they expand RT functionality without changing user applications or without complicating the SM.</p>
<p><img decoding="async" loading="lazy" alt="runtime-example" src="https://lucagiorgino.github.io/assets/images/runtime-87a3226d8a9e902dc6ce2f2dd98efe62.svg" width="981" height="321" class="img_ev3q"> <em>Example of runtime reusability on the left and its functionalities on the right</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enclave">Enclave<a href="https://lucagiorgino.github.io/blog/keystone-enclave#enclave" class="hash-link" aria-label="Direct link to Enclave" title="Direct link to Enclave">​</a></h3>
<p>An <strong>Enclave</strong> is an environment isolated from the untrusted OS and other enclaves. Each enclave is provided with a private physical memory region which is accessible by only the enclave and SM. Each enclave consists of a user-level enclave application called <em>eapp</em> and a supervisor-level runtime. An eapp is a user-level application that executes in the enclave. A developer can create a custom eapp from scratch, or just execute an existing RISC-V binary in Keystone. The enclave lifecycle is shown below.</p>
<p><img decoding="async" loading="lazy" alt="enclave-lifecycle" src="https://lucagiorgino.github.io/assets/images/Enclave%20lifecycle-4bcbdb8b30aba6302e4adb8c2901b8b3.png" width="960" height="720" class="img_ev3q"> <em>Enclave Lifecycle from Keystone docs</em></p>
<p>The main phases are:</p>
<ul>
<li><em>creation</em>: when an enclave is started it has a contiguous range of physical memory that is called Enclave Private Memory (EPM). In the beginning, the EPM is allocated by the untrusted host, which initialises it with the enclave's page table, the runtime and the enclave application. When the untrusted host calls the SM to create an enclave, the SM isolates and secures the EPM using a PMP entry, and then the PMP status is propagated throughout all of the system's cores. Subsequently, before the enclave execution, the enclave's initial state is measured and verified by the SM.</li>
<li><em>execution</em>: the SM enters the enclave on one of the cores as soon as the untrusted asks for it. The PMP permission is enabled to the core by the SM, and the core starts running the eapp. The RT can exit or re-enter the enclave at any time depending on the execution flow of the eapp. The PMP permissions are switched to keep the isolation each time a core exits or enters the enclave.</li>
<li><em>destruction</em>: the untrusted host may want to destroy the enclave at any moment, when it happens, the EPM is cleared by the SM and the PMP entry is freed. The untrusted host then definitely reclaims the released memory.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="edge-calls">Edge Calls<a href="https://lucagiorgino.github.io/blog/keystone-enclave#edge-calls" class="hash-link" aria-label="Direct link to Edge Calls" title="Direct link to Edge Calls">​</a></h3>
<p>Function calls that enter or exit the enclave are known as <em>edge calls</em> in Keystone, as in other enclave systems. For instance, if an enclave wants to send a network packet, it must use an edge call to deliver the data to an untrusted host process. The current version of Keystone allows <em>enclave</em> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em"></span><span class="mrel">→</span></span></span></span> <em>untrusted host</em> calls, also known internally as <em>ocalls</em> (outbound calls, names under discussion). In the current version of Keystone, all ocall wrapping code uses shared memory regions to transfer data. When referencing data in these regions virtual address pointers are never used, instead, only offsets into the region are used.</p>
<p><img decoding="async" loading="lazy" alt="ocall-lifecycle" src="https://lucagiorgino.github.io/assets/images/ocall-5ad7272051de9839839fc58626f9fb6f.svg" width="1069" height="573" class="img_ev3q"> <em>Simplified example of an ocall lifecycle</em></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="edge-calls-lifecycle">Edge Calls Lifecycle<a href="https://lucagiorgino.github.io/blog/keystone-enclave#edge-calls-lifecycle" class="hash-link" aria-label="Direct link to Edge Calls Lifecycle" title="Direct link to Edge Calls Lifecycle">​</a></h4>
<p>Consider for example a generic <code>ocall_do_something</code>, as represented in Fig. [ocall-lifecycle]. This call transfers some values passed as arguments from the enclave to be processed by the host process (it could be a value to be printed, a file to be stored and so on). The enclave application calls <code>ocall_do_something(...)</code>, which is an edge wrapper function.<br>
<code>ocall_do_something(...)</code> uses the system-call-like interface to the runtime to execute an <em>ocalls</em> similar to <code>ocall(OCALL_DO_SOMETHING, &amp;input, sizeof(input), &amp;ouput,  sizeof(output))</code>. The enclave passes a pointer to the value, the size of the argument and any necessary return buffer information.
After allocating an <code>edge_call</code> structure in the shared memory region, the runtime fills out the call type, copies the value into another part of the shared memory, and sets up the offset to the argument value. Note that, in Keystone, edge calls employ offset values in the shared memory area, rather than pointers.
The runtime subsequently exits the enclave with an <code>SBI_CALL</code>, i.e. <code>sbi_stop_enclave()</code>, passing a value indicating that the enclave is executing an <em>ocalls</em> rather than shutting down.</p>
<p>After resuming execution of the Keystone kernel driver, it checks the enclave's exit status, notes a pending <em>ocalls</em> and handles control to the userspace host process.
The registered <em>ocalls</em> handler wrapper for <code>OCALL_DO_SOMETHING</code> is dispatched by the userspace host process, which also consumes the edge call. The wrapper generates a pointer to the argument value from the offset in the shared memory region and then calls <code>do_something</code> with the value as an argument. The host wrapper determines whether any return values must be copied into the shared memory region upon return and returns the control to the driver after setting the edge call return status to <code>SUCCESS</code>.</p>
<p>Through an <code>SBI_CALL</code>, the driver rejoins the enclave runtime. The enclave <em>ocalls</em> wrapper code is resumed once the runtime determines whether any return information has to be copied from the shared region into return buffers. Finally, the enclave function that has called at the beginning <code>ocall_do_something</code> receives any return values from the <em>ocalls</em> wrapper code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="memory-isolation-using-risc-v-pmp">Memory isolation using RISC-V PMP<a href="https://lucagiorgino.github.io/blog/keystone-enclave#memory-isolation-using-risc-v-pmp" class="hash-link" aria-label="Direct link to Memory isolation using RISC-V PMP" title="Direct link to Memory isolation using RISC-V PMP">​</a></h2>
<p>In Keystone, developers refer to the memory section that an enclave uses as a <em>region</em> and each region is defined by a PMP entry. The SM employs two PMP registers for internal purposes (i.e. security monitor memory and untrusted memory). One active enclave may use one of the remaining PMP entries each. RISC-V PMP has several properties, the most relevant are:</p>
<ul>
<li>prioritization by index: the index of PMP entries statically determines the priority. Indices go from <code>0</code> to <code>N</code>, where <code>N</code> depends upon the platform. <code>0</code> is the highest priority, whereas <code>N</code> is the lowest</li>
<li>default denies: if no PMP entry matches with an address, the memory access will be rejected by default.</li>
</ul>
<p>For simplicity, in the following explanation PMP entries are denoted as <code>pmp[i]</code> where <code>i</code> is an index. Below is a representation of the memory in its initial state. At the start of the boot process, physical memory is not accessible by U- or S-modes.</p>
<div class="language-title=&quot; codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-title=&quot; codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-: inaccessible (NO_PERM), =: accessible (ALL_PERM)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[1:N]    |                                       | : undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net result  |---------------------------------------|   </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The SM sets the highest priority PMP entry to cover the address range containing itself and sets all permission bits to 0. Suddenly, the SM sets the lowest priority PMP entry to cover the full memory and sets all permission bits to 1, this will allow the OS to access the remaining memory and start booting. The result can be seen below.</p>
<div class="language-title=&quot;Memory language-title=&quot;memory codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-title=&quot;memory codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-: inaccessible (NO_PERM), =: accessible (ALL_PERM)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[0]       |-------|                              | : SM memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[others]  |                                      | : undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[N]       |======================================| : OS memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net result   |-------|==============================|</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As shown below, every time the SM creates an enclave, it will select a PMP entry for the enclave to defend its memory from other U-/S-mode software.</p>
<div class="language-title=&quot;Memory language-title=&quot;memory codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-title=&quot;memory codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-: inaccessible (NO_PERM), =: accessible (ALL_PERM)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[0]       |-------|                              | : SM memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[1]       |              |---------|             | : enclave </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[others]  |                                      | : undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[N]       |======================================| : OS memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net result   |-------|======|---------|=============|</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When the SM enters the enclave and executes the eapp, it flips the permission bits of the enclave's PMP entry and the last PMP entry. Untrusted shared buffer is the term for the contiguous memory region that Keystone enables the OS to allocate in the OS memory space in order to use it as an enclave's communication buffer. This is shown below.<br>
<!-- -->The SM just flips the permission bits back when it leaves the enclave. When an enclave is destroyed by the SM, the PMP entry is made available for usage by other enclaves.</p>
<div class="language-title=&quot;Memory language-title=&quot;memory codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-title=&quot;memory codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-: inaccessible (NO_PERM), =: accessible (ALL_PERM)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[0]       |-------|                              | : SM memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[1]       |              |=========|             | : enclave </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[others]  |                                      | : undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pmp[N]       |                                |==|  | : untrusted </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        shared </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        buffer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">net result   |-------|------|=========|-------|==|--|</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="keystone-key-hierarchy">Keystone key-hierarchy<a href="https://lucagiorgino.github.io/blog/keystone-enclave#keystone-key-hierarchy" class="hash-link" aria-label="Direct link to Keystone key-hierarchy" title="Direct link to Keystone key-hierarchy">​</a></h2>
<p>Below is shown the key hierarchy of Keystone. The root of the key hierarchy is the asymmetric processor key pair (<code>SK_D</code> and  <code>PK_D</code>). The asymmetric security monitor key pair (<code>SK_SK</code> and <code>PK_SM</code>) is derived from the measurement of the security monitor (<code>H_SM</code>) and the private processor key (<code>SK_D</code>).
As a result, the computed security monitor key pair is bound to the processor and to the identity of the security monitor itself.</p>
<p><img decoding="async" loading="lazy" alt="keystone-key-hierarchy" src="https://lucagiorgino.github.io/assets/images/Keystone%20key%20hierarchy-117a0881f26bf87a76b8de575feb9075.svg" width="963" height="264" class="img_ev3q"> <em>The key hierarchy of Keystone</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sealing-key-derivation">Sealing-Key Derivation<a href="https://lucagiorgino.github.io/blog/keystone-enclave#sealing-key-derivation" class="hash-link" aria-label="Direct link to Sealing-Key Derivation" title="Direct link to Sealing-Key Derivation">​</a></h3>
<p>The image above also illustrates how <em>sealing-keys</em> are derived. An enclave can generate a key for data encryption using the data-sealing capability, enabling it to store data in untrusted non-volatile memory outside the enclave. This key is tied to the identity of the processor, the security monitor, and the enclave. As a result, only the same enclave using the same processor and security monitor can generate the same key. Data can be encrypted using this key and stored in unsecured, non-volatile memory. After an enclave restart, it can generate the same key once more, retrieve the encrypted data from the untrusted storage, and then use the derived key to decrypt it. A sealing key is computed starting from three inputs:</p>
<ul>
<li>the private security monitor key (<code>SK_SM</code>)</li>
<li>the hash of the enclave (<code>H_SM</code>)</li>
<li>a key identifier
The key identifier is an extra input for the key derivation function selectable by the enclave. A single enclave can generate several keys by giving the key identifier various values.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="resources">Resources<a href="https://lucagiorgino.github.io/blog/keystone-enclave#resources" class="hash-link" aria-label="Direct link to Resources" title="Direct link to Resources">​</a></h2>
<ul>
<li><a href="https://doi.org/10.1109/Trustcom.2015.357" target="_blank" rel="noopener noreferrer">Trusted Execution Environment: What It is, and What It is Not</a>, Sabt, Mohamed and Achemlal, Mohammed and Bouabdallah, Abdelmadjid</li>
<li><a href="https://blog.quarkslab.com/introduction-to-trusted-execution-environment-arms-trustzone.html" target="_blank" rel="noopener noreferrer">Introduction to Trusted Execution Environment: ARM's TrustZone</a></li>
<li><a href="https://apps.dtic.mil/sti/pdfs/ADA108831.pdf" target="_blank" rel="noopener noreferrer">Specification of a trusted computing base (TCB)</a></li>
<li><a href="https://keystone-enclave.org/blog/" target="_blank" rel="noopener noreferrer">Keystone blog</a></li>
<li><a href="https://docs.keystone-enclave.org/en/latest/index.html" target="_blank" rel="noopener noreferrer">Keystone Enclave's documentation</a></li>
<li><a href="https://doi.org/10.1145/3342195.3387532" target="_blank" rel="noopener noreferrer">Keystone: An open framework for architecting trusted execution environments</a>, Lee, Dayeol and Kohlbrenner, David and Shinde, Shweta and Asanovi'c, Krste and Song, Dawn</li>
<li><a href="https://sifive.github.io/freedom-metal-docs/devguide/pmps.html" target="_blank" rel="noopener noreferrer">Physical Memory Protection</a></li>
<li><a href="https://riscv.org/technical/specifications/" target="_blank" rel="noopener noreferrer">RISC-V Specification Documentations</a></li>
</ul>]]></content:encoded>
            <category>trusted-computing</category>
        </item>
        <item>
            <title><![CDATA[What I learnt using Actix-web]]></title>
            <link>https://lucagiorgino.github.io/blog/what-i-learnt-using-actix-web</link>
            <guid>https://lucagiorgino.github.io/blog/what-i-learnt-using-actix-web</guid>
            <pubDate>Mon, 12 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post, I’ll share my few key learnings from using Actix Web.]]></description>
            <content:encoded><![CDATA[<p>In this post, I’ll share my few key learnings from using Actix Web.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="project-structure">Project structure<a href="https://lucagiorgino.github.io/blog/what-i-learnt-using-actix-web#project-structure" class="hash-link" aria-label="Direct link to Project structure" title="Direct link to Project structure">​</a></h2>
<p>This is how I structured the backend when working with Actix Web.</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── src/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── dtos/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── controllers/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── middlewares/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── repository/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── utils/      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── errors.rs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── lib.rs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── main.rs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .env</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── Cargo.toml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="error-management">Error management<a href="https://lucagiorgino.github.io/blog/what-i-learnt-using-actix-web#error-management" class="hash-link" aria-label="Direct link to Error management" title="Direct link to Error management">​</a></h2>
<p>For error handling, I found the <code>thiserror</code> crate particularly useful due to its powerful <code>derive</code> macro, which simplifies custom error definitions. Then, implementing the <code>ResponseError</code> trait enables mapping <code>ServerError</code> to an <code>HttpResponse</code>, which includes the appropriate status code and a JSON response containing the error message. Example is shown below.</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">actix_web</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">HttpResponse</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ResponseError</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">http</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">header</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">ContentType</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">reqwest</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">StatusCode</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">serde_json</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(thiserror::Error, Debug)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">ServerError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Other errors ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Database Errors</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Row not found"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">RowNotFound</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"tokio_postgres error"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">TokioPostgresError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attribute attr-name" style="color:#00a4db">#[from]</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">tokio_postgres</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">error</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Middleware error: {0}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">MiddlewareError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">ResponseError</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">ServerError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">error_response</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">HttpResponse</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">HttpResponse</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">status_code</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert_header</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">ContentType</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">html</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">json!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"error"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">status_code</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">StatusCode</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">match</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token keyword" style="color:#00009f">self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Other errors ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">ServerError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">RowNotFound</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">StatusCode</span><span class="token punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">NOT_FOUND</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">ServerError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">TokioPostgresError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">StatusCode</span><span class="token punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">INTERNAL_SERVER_ERROR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">ServerError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">MiddlewareError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token class-name">StatusCode</span><span class="token punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">INTERNAL_SERVER_ERROR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="middlewares">Middlewares<a href="https://lucagiorgino.github.io/blog/what-i-learnt-using-actix-web#middlewares" class="hash-link" aria-label="Direct link to Middlewares" title="Direct link to Middlewares">​</a></h2>
<p>In one project, I worked on developing a middleware responsible for extracting a JWT from a request and performing custom verification. At the time, I found the documentation on creating and using <a href="https://actix.rs/docs/middleware/" target="_blank" rel="noopener noreferrer">Actix middleware</a> somewhat unclear (<a href="https://docs.rs/actix-web/latest/actix_web/middleware/" target="_blank" rel="noopener noreferrer">docs.rs</a>). My goal was to define a single request that would be preprocessed by the custom middleware. To achieve this, I simply needed to use the <code>wrap</code> macro.</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">actix_web</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token namespace" style="opacity:0.7">body</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">MessageBody</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">dev</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">ServiceRequest</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ServiceResponse</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">HttpMessage</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">actix_web_lab</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">middleware</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">middleware_foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ServiceRequest</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    next</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Next</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">MessageBody</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">ServiceResponse</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">MessageBody</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// pre-processing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">extensions_mut</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">insert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token class-name">SomeData</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*...*/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// invoke the wrapped middleware or service</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> res </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// post-processing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">res</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[get(</span><span class="token attribute attr-name string" style="color:#e3116c">"/example-request"</span><span class="token attribute attr-name" style="color:#00a4db">, wrap = </span><span class="token attribute attr-name string" style="color:#e3116c">"from_fn(middleware_foo)"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">example_request</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    req</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">HttpRequest</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    opt_some_data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Option</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">ReqData</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">SomeData</span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">HttpResponse</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">ServerError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> some_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> opt_some_data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ok_or</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">ServerError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">MiddlewareError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Missing strucuture"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into_inner</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// use some_data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*...*/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>rust</category>
            <category>actix-web</category>
        </item>
        <item>
            <title><![CDATA[How I structure my React applications]]></title>
            <link>https://lucagiorgino.github.io/blog/how-i-structure-my-react-applications</link>
            <guid>https://lucagiorgino.github.io/blog/how-i-structure-my-react-applications</guid>
            <pubDate>Sat, 10 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Since university, I always used React for all of my front-end projects.  This is how I usually structure them:]]></description>
            <content:encoded><![CDATA[<p>Since university, I always used <a href="https://react.dev/" target="_blank" rel="noopener noreferrer">React</a> for all of my front-end projects.  This is how I usually structure them:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">frontend/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── public/ # Static directory. Any contents inside here will be copied into the root of the final build directory. As an example images and `wasm` libraries</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── src/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── api/ # API call to backend components</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── components/ # Shared components implemented for application-wide use</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── hooks/ # Shared hooks implemented for application-wide use</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── pages/ # Application pages/routes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── types/ # Shared types utilized throughout the entire application</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── utils/ # Shared utility functions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── index.css # Main application component</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; ├── main.tsx  # Main application component</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── vite-env.d.ts # vite file for TypeScript IntelliSense</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .env # Env Variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .eslintignore # eslint file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .eslintrc.cjs # eslint file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .gitignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── LICENSE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── README.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── index.html </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── package.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── package-lock.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── tsconfig.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── tsconfig.node.json</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── vite.config.ts # vite config file</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>web-applications</category>
            <category>react</category>
        </item>
    </channel>
</rss>