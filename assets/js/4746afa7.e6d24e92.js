"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5635],{2387:e=>{e.exports=JSON.parse('{"permalink":"/blog/how-i-structure-my-react-applications","source":"@site/blog/2024-02-10-how-i-structure-my-react-applications.md","title":"How I structure my React applications","description":"Since university, I always used React for all of my front-end projects.  This is how I usually structure them:","date":"2024-02-10T00:00:00.000Z","tags":[{"inline":true,"label":"web-applications","permalink":"/blog/tags/web-applications"},{"inline":true,"label":"react","permalink":"/blog/tags/react"}],"readingTime":0.83,"hasTruncateMarker":true,"authors":[{"name":"Luca Giorgino","title":"Me","url":"https://github.com/lucagiorgino","imageURL":"https://github.com/lucagiorgino.png","key":"luca","page":null}],"frontMatter":{"slug":"how-i-structure-my-react-applications","title":"How I structure my React applications","authors":"luca","tags":["web-applications","react"]},"unlisted":false,"prevItem":{"title":"What I learnt using Actix-web","permalink":"/blog/what-i-learnt-using-actix-web"}}')},4737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var i=n(2387),a=n(4848),s=n(8453);const o={slug:"how-i-structure-my-react-applications",title:"How I structure my React applications",authors:"luca",tags:["web-applications","react"]},r=void 0,c={authorsImageUrls:[void 0]},l=[];function p(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Since university, I always used ",(0,a.jsx)(t.a,{href:"https://react.dev/",children:"React"})," for all of my front-end projects.  This is how I usually structure them:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"frontend/\n\u251c\u2500\u2500 public/ # Static directory. Any contents inside here will be copied into the root of the final build directory. As an example images and `wasm` libraries\n\u251c\u2500\u2500 src/\n\u2502\xa0\xa0 \u251c\u2500\u2500 api/ # API call to backend components\n\u2502\xa0\xa0 \u251c\u2500\u2500 components/ # Shared components implemented for application-wide use\n\u2502\xa0\xa0 \u251c\u2500\u2500 hooks/ # Shared hooks implemented for application-wide use\n\u2502   \u251c\u2500\u2500 pages/ # Application pages/routes\n\u2502\xa0\xa0 \u251c\u2500\u2500 types/ # Shared types utilized throughout the entire application\n\u2502\xa0\xa0 \u251c\u2500\u2500 utils/ # Shared utility functions\n\u2502\xa0\xa0 \u251c\u2500\u2500 index.css # Main application component\n\u2502\xa0\xa0 \u251c\u2500\u2500 main.tsx  # Main application component\n\u2502\xa0\xa0 \u2514\u2500\u2500 vite-env.d.ts # vite file for TypeScript IntelliSense\n\u251c\u2500\u2500 .env # Env Variables\n\u251c\u2500\u2500 .eslintignore # eslint file\n\u251c\u2500\u2500 .eslintrc.cjs # eslint file\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 index.html \n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 tsconfig.node.json\n\u2514\u2500\u2500 vite.config.ts # vite config file\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);