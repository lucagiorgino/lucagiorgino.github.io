"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[328],{490:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var t=n(5350),s=n(4848),o=n(8453);const a={slug:"what-i-learnt-using-actix-web",title:"What I learnt using Actix-web",authors:"luca",tags:["rust","actix-web"]},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Project structure",id:"project-structure",level:2},{value:"Error management",id:"error-management",level:2},{value:"Middlewares",id:"middlewares",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"In this post, I\u2019ll share my few key learnings from using Actix Web."}),"\n",(0,s.jsx)(r.h2,{id:"project-structure",children:"Project structure"}),"\n",(0,s.jsx)(r.p,{children:"This is how I structured the backend when working with Actix Web."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-shell",children:"server/\n\u251c\u2500\u2500 src/\n\u2502\xa0\xa0 \u251c\u2500\u2500 dtos/\n\u2502\xa0\xa0 \u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 middlewares/\n\u2502\xa0\xa0 \u251c\u2500\u2500 repository/\n\u2502\xa0\xa0 \u251c\u2500\u2500 utils/      \n\u2502\xa0\xa0 \u251c\u2500\u2500 errors.rs\n\u2502\xa0\xa0 \u251c\u2500\u2500 lib.rs\n\u2502\xa0\xa0 \u2514\u2500\u2500 main.rs\n\u251c\u2500\u2500 .env\n\u2514\u2500\u2500 Cargo.toml\n"})}),"\n",(0,s.jsx)(r.h2,{id:"error-management",children:"Error management"}),"\n",(0,s.jsxs)(r.p,{children:["For error handling, I found the ",(0,s.jsx)(r.code,{children:"thiserror"})," crate particularly useful due to its powerful ",(0,s.jsx)(r.code,{children:"derive"})," macro, which simplifies custom error definitions. Then, implementing the ",(0,s.jsx)(r.code,{children:"ResponseError"})," trait enables mapping ",(0,s.jsx)(r.code,{children:"ServerError"})," to an ",(0,s.jsx)(r.code,{children:"HttpResponse"}),", which includes the appropriate status code and a JSON response containing the error message. Example is shown below."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'use actix_web::{HttpResponse, ResponseError, http::header::ContentType};\nuse reqwest::StatusCode;\nuse serde_json::json;\n\n#[derive(thiserror::Error, Debug)]\npub enum ServerError {\n\n    // Other errors ...\n\n    // Database Errors\n    #[error("Row not found")]   \n    RowNotFound,\n    #[error("tokio_postgres error")]\n    TokioPostgresError(#[from] tokio_postgres::error::Error),\n    #[error("Middleware error: {0}")]\n    MiddlewareError(String),\n}   \n\nimpl ResponseError for ServerError {\n\n    fn error_response(&self) -> HttpResponse {\n        HttpResponse::build(self.status_code())\n            .insert_header(ContentType::html())\n            .json(json!({\n                "error": self.to_string()\n            }))\n    }\n\n    fn status_code(&self) -> StatusCode {\n        match *self {\n            // Other errors ...\n            ServerError::RowNotFound => StatusCode::NOT_FOUND,\n            ServerError::TokioPostgresError(_) => StatusCode::INTERNAL_SERVER_ERROR,\n            ServerError::MiddlewareError(_) => StatusCode::INTERNAL_SERVER_ERROR,\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"middlewares",children:"Middlewares"}),"\n",(0,s.jsxs)(r.p,{children:["In one project, I worked on developing a middleware responsible for extracting a JWT from a request and performing custom verification. At the time, I found the documentation on creating and using ",(0,s.jsx)(r.a,{href:"https://actix.rs/docs/middleware/",children:"Actix middleware"})," somewhat unclear (",(0,s.jsx)(r.a,{href:"https://docs.rs/actix-web/latest/actix_web/middleware/",children:"docs.rs"}),"). My goal was to define a single request that would be preprocessed by the custom middleware. To achieve this, I simply needed to use the ",(0,s.jsx)(r.code,{children:"wrap"})," macro."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:"use actix_web::{body::MessageBody, dev::{ServiceRequest, ServiceResponse}, Error, HttpMessage};\nuse actix_web_lab::middleware::Next;\n\npub async fn middleware_foo(\n    req: ServiceRequest,\n    next: Next<impl MessageBody>,\n) -> Result<ServiceResponse<impl MessageBody>, Error> {\n    // pre-processing\n\n    req.extensions_mut().insert( SomeData{ /*...*/ });\n\n    // invoke the wrapped middleware or service\n    let res = next.call(req).await?;\n\n    // post-processing\n    Ok(res)\n}\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",children:'#[get("/example-request", wrap = "from_fn(middleware_foo)")]\nasync fn example_request(\n    req: HttpRequest,\n    opt_some_data: Option<ReqData<SomeData>>,\n) -> Result<HttpResponse, ServerError> {\n    \n    let some_data = opt_some_data.ok_or(ServerError::MiddlewareError("Missing strucuture".to_string()))?.into_inner();\n    \n    // use some_data\n\n    Ok( /*...*/ )\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},5350:e=>{e.exports=JSON.parse('{"permalink":"/blog/what-i-learnt-using-actix-web","source":"@site/blog/2024-02-12-what-i-learnt-using-actix-web/index.md","title":"What I learnt using Actix-web","description":"In this post, I\u2019ll share my few key learnings from using Actix Web.","date":"2024-02-12T00:00:00.000Z","tags":[{"inline":true,"label":"rust","permalink":"/blog/tags/rust"},{"inline":true,"label":"actix-web","permalink":"/blog/tags/actix-web"}],"readingTime":1.67,"hasTruncateMarker":true,"authors":[{"name":"Luca Giorgino","title":"Me","url":"https://github.com/lucagiorgino","imageURL":"https://github.com/lucagiorgino.png","key":"luca","page":null}],"frontMatter":{"slug":"what-i-learnt-using-actix-web","title":"What I learnt using Actix-web","authors":"luca","tags":["rust","actix-web"]},"unlisted":false,"prevItem":{"title":"Keystone Enclave","permalink":"/blog/keystone-enclave"},"nextItem":{"title":"How I structure my React applications","permalink":"/blog/how-i-structure-my-react-applications"}}')}}]);